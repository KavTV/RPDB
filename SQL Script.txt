/* CREATE TABLES */

DROP TABLE IF EXISTS Projects CASCADE;
DROP TABLE IF EXISTS Education CASCADE;
DROP TABLE IF EXISTS Students CASCADE;
DROP TABLE IF EXISTS StudentProjects CASCADE;

CREATE TABLE Projects (
	ProjectId integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
	(start with 1 increment 1),
	Headline VARCHAR(70) NOT NULL,
	Documentation varchar,
	Description varchar(255)
);

CREATE TABLE Education (
	EducationId integer PRIMARY KEY,
	Education VARCHAR(60) NOT NULL
);

CREATE TABLE Students (
	Username varchar(30) PRIMARY KEY,
	EducationId integer NOT NULL,
	FullName varchar(255),
	
	FOREIGN KEY (EducationId) REFERENCES Education(EducationId)
);

CREATE TABLE StudentProjects (
	ProjectId int,
	Username varchar(30),
	
	FOREIGN KEY (ProjectId) REFERENCES Projects(ProjectId),
	FOREIGN KEY (Username) REFERENCES Students(Username)
);

Insert into Education values (1, 'IT-Supporter');
Insert into Education values (2, 'Infrastruktur');
Insert into Education values (3, 'Programmering');



/* FUNCTIONS AND PROCEDURES */

CREATE or replace FUNCTION FN_GetStudents () 
Returns Table(username varchar, fullname varchar, education varchar)
as $$
BEGIN
/*Returns all students*/
RETURN QUERY SELECT DISTINCT students.username, students.fullname, education.education from students 
LEFT JOIN education
ON education.educationid = students.educationid
ORDER BY students.username;

END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_getstudentprojects(student varchar) 
Returns Table(projectid int, headline varchar, documentation varchar, description varchar)
as $$
BEGIN
/*Returns all students projects*/
RETURN QUERY SELECT DISTINCT projects.projectid, projects.headline, projects.documentation, projects.description from studentprojects 
LEFT JOIN Projects
ON studentprojects.projectid = projects.projectid
WHERE studentprojects.username = student
ORDER BY projects.projectid;

END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_getprojects() 
Returns Table(projectid int, headline varchar, documentation varchar, description varchar)
as $$
BEGIN
/*Returns all students*/
RETURN QUERY SELECT projects.projectid, projects.headline, projects.documentation, projects.description from projects
ORDER BY projectid;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_getprojectstudents(_id integer) 
Returns Table(username varchar, fullname varchar, educationid varchar)
as $$
BEGIN
/*Returns all the students in the specified project*/
RETURN QUERY SELECT students.username, students.fullname, education.education from studentprojects
LEFT JOIN students
ON students.username = studentprojects.username
LEFT JOIN education
ON education.educationid = students.educationid
WHERE studentprojects.projectid = _id
ORDER BY students.fullname;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE OR REPLACE PROCEDURE SP_createproject(_headline varchar(70), _documentation varchar, _description varchar(255), _username varchar[])
LANGUAGE plpgsql

AS $$

DECLARE
   v_id int;
   u varchar;
   BEGIN
	INSERT INTO projects(headline,documentation,description)
	VALUES(_headline,_documentation,_description) RETURNING  projectid INTO v_id;
	
	FOREACH u IN ARRAY _username
	LOOP
	INSERT INTO studentprojects 
	VALUES(v_id, u);
	END LOOP;
END;
$$;


/**/
CREATE OR REPLACE PROCEDURE SP_DeleteProject(_projectid integer)
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 DELETE FROM studentprojects WHERE projectid = _projectid;
	 DELETE FROM Projects WHERE projectid = _projectid;
	 
END
$$;

/**/
CREATE OR REPLACE PROCEDURE SP_editproject(_projectid integer, _headline varchar(70), _documentation varchar, _description varchar(255),_username varchar[])
LANGUAGE plpgsql

AS $$
DECLARE
	u varchar;
BEGIN
	 
	 UPDATE projects SET headline = _headline, documentation = _documentation, description = _description
	 WHERE projectid = _projectid;
	 
	 DELETE FROM studentprojects
	 WHERE projectid = _projectid;
	 
	 FOREACH u IN ARRAY _username
	LOOP
	INSERT INTO studentprojects 
	VALUES(_projectid, u);
	END LOOP;
	 
END;
$$;

/**/
CREATE or replace FUNCTION FN_GetProject(_id integer) 
Returns Table(projectid int, headline varchar, documentation varchar, description varchar)
as $$
BEGIN

RETURN QUERY SELECT projects.projectid, projects.headline, projects.documentation, projects.description from projects
WHERE projects.projectid = _id;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_GetStudent(_username varchar) 
Returns Table(username varchar, fullname varchar, education varchar)
as $$
BEGIN

RETURN QUERY SELECT students.username, students.fullname, education.education from students
LEFT JOIN education
ON education.educationid = students.educationid
WHERE students.username = _username;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE OR REPLACE PROCEDURE SP_AddToProject(_projectid integer, _username varchar )
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 INSERT INTO studentprojects VALUES(_projectid, _username);
	 
END
$$;

/**/
CREATE OR REPLACE PROCEDURE SP_RemoveFromProject(_projectid integer, _username varchar )
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 DELETE FROM studentprojects 
	 WHERE studentprojects.projectid = _projectid AND studentprojects.username = _username;  
	 
END
$$;

/**/
