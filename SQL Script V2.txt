
CREATE TABLE Status (
	Statusid integer PRIMARY KEY,
	Status VARCHAR(40) NOT NULL
);
CREATE TABLE Education (
	EducationId integer PRIMARY KEY,
	Education VARCHAR(60) NOT NULL
);

CREATE TABLE Students (
	Username varchar(30) PRIMARY KEY,
	EducationId integer NOT NULL,
	FullName varchar(255),
	
	FOREIGN KEY (EducationId) REFERENCES Education(EducationId)
);

CREATE TABLE Projects (
	ProjectId integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
	(start with 1 increment 1),
	Statusid integer,
	Projectmanager varchar,
	Headline VARCHAR(70) NOT NULL,
	Documentation varchar,
	Description varchar(255),
	Startdate date,
	Enddate date,
	FOREIGN KEY (Statusid) REFERENCES Status(Statusid),
	FOREIGN KEY (Projectmanager) REFERENCES Students(Username)
);

CREATE TABLE Secret (
	Pwd char(60),
	Username varchar,
	Salt char(60),
	Tokn char(255),
	PRIMARY KEY(Pwd, Username),
	FOREIGN KEY (Username) REFERENCES Students(Username)
);

CREATE TABLE Auth (
	Username varchar,
	Authtoken char(60),
	PRIMARY KEY(Username, Authtoken),
	FOREIGN KEY (Username) REFERENCES Students(Username)
);

CREATE TABLE StudentProjects (
	ProjectId int,
	Username varchar(30),
	
	FOREIGN KEY (ProjectId) REFERENCES Projects(ProjectId),
	FOREIGN KEY (Username) REFERENCES Students(Username)
);

CREATE TABLE Projectcomments (
	Commentid int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
	(start with 1 increment 1),
	Projectid integer,
	Username varchar(30),
	Msg varchar(255),
	Time_stamp timestamp,
	
	FOREIGN KEY (Projectid) REFERENCES Projects(ProjectId),
	FOREIGN KEY (Username) REFERENCES Students(Username)
);

Insert into Education values (1, 'IT-Supporter');
Insert into Education values (2, 'Infrastruktur');
Insert into Education values (3, 'Programmering');
Insert into Education values (4, 'Instruktør');

INSERT INTO Status(statusid, status) values(1,'Færdig');
INSERT INTO Status(statusid, status) values(2,'Aktiv');
INSERT INTO Status(statusid, status) values(3,'Mangler folk');
INSERT INTO Status(statusid, status) values(4,'Standby');
INSERT INTO Status(statusid, status) values(5,'Ikke startet');
/*FUNCTIONS AND PROCEDURES*/

CREATE or replace FUNCTION FN_GetStudents () 
Returns Table(username varchar, fullname varchar, education varchar)
as $$
BEGIN
/*Returns all students*/
RETURN QUERY SELECT DISTINCT students.username, students.fullname, education.education from students 
LEFT JOIN education
ON education.educationid = students.educationid
ORDER BY students.username;

END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_getstudentprojects(student varchar) 
Returns Table(projectid int, status int, projectmanager varchar,headline varchar, documentation varchar, description varchar, startdate date, enddate date)
as $$
BEGIN
/*Returns all students projects*/
RETURN QUERY SELECT DISTINCT projects.projectid, projects.statusid,projects.projectmanager, projects.headline, 
projects.documentation, projects.description, projects.startdate, projects.enddate from studentprojects 
LEFT JOIN Projects
ON studentprojects.projectid = projects.projectid
WHERE studentprojects.username = student
ORDER BY projects.projectid;

END; $$
LANGUAGE PLPGSQL;


/**/
CREATE or replace FUNCTION FN_getprojects() 
Returns Table(projectid int, status int, projectmanager varchar, headline varchar, documentation varchar, description varchar, startdate date, enddate date)
as $$
BEGIN
/*Returns all students*/
RETURN QUERY SELECT projects.projectid, projects.statusid, projects.projectmanager, projects.headline, 
projects.documentation, projects.description, projects.startdate, projects.enddate from projects
ORDER BY projectid;


END; $$
LANGUAGE PLPGSQL;


/**/
CREATE or replace FUNCTION FN_getprojectstudents(_id integer) 
Returns Table(username varchar, fullname varchar, educationid varchar)
as $$
BEGIN
/*Returns all the students in the specified project*/
RETURN QUERY SELECT students.username, students.fullname, education.education from studentprojects
LEFT JOIN students
ON students.username = studentprojects.username
LEFT JOIN education
ON education.educationid = students.educationid
WHERE studentprojects.projectid = _id
ORDER BY students.fullname;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE OR REPLACE PROCEDURE SP_createproject(_headline varchar(70), _documentation varchar, _description varchar(255), _username varchar[])
LANGUAGE plpgsql

AS $$

DECLARE
   v_id int;
   u varchar;
   BEGIN
	INSERT INTO projects(headline,documentation,description)
	VALUES(_headline,_documentation,_description) RETURNING  projectid INTO v_id;
	
	FOREACH u IN ARRAY _username
	LOOP
	INSERT INTO studentprojects 
	VALUES(v_id, u);
	END LOOP;
END;
$$;


/**/
CREATE OR REPLACE PROCEDURE SP_createproject(_status int, _projectmanager varchar,_headline varchar(70), _documentation varchar, _description varchar(255), _startdate date, _enddate date,_username varchar[])
LANGUAGE plpgsql

AS $$

DECLARE
   v_id int;
   u varchar;
   BEGIN
	INSERT INTO projects(statusid, projectmanager, headline,documentation,description,startdate,enddate)
	VALUES(_status,_projectmanager, _headline,_documentation,_description, _startdate, _enddate) RETURNING  projectid INTO v_id; 
	
	INSERT INTO studentprojects
	VALUES(v_id, _projectmanager);
	
	FOREACH u IN ARRAY _username
	LOOP
		if u != '' then
			if u != _projectmanager then
				INSERT INTO studentprojects 
				VALUES(v_id, u);
			end if;
		end if;
	END LOOP;
END;
$$;

/**/
CREATE OR REPLACE PROCEDURE SP_DeleteProject(_projectid integer)
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 DELETE FROM studentprojects WHERE projectid = _projectid;
	 DELETE FROM projectcomments WHERE projectid = _projectid;
	 DELETE FROM Projects WHERE projectid = _projectid;
	 
END
$$;

/**/
CREATE OR REPLACE PROCEDURE SP_editproject(_projectid integer, _status int, _projectmanager varchar,_headline varchar(70), _documentation varchar, _description varchar(255), _startdate date, _enddate date,_username varchar[])
LANGUAGE plpgsql

AS $$
DECLARE
	u varchar;
BEGIN
	 
	 UPDATE projects SET statusid = _status, projectmanager = _projectmanager, headline = _headline, 
	 documentation = _documentation, description = _description, startdate = _startdate, enddate = _enddate
	 WHERE projectid = _projectid;
	 
	 DELETE FROM studentprojects
	 WHERE projectid = _projectid;
	 
	 FOREACH u IN ARRAY _username
	LOOP
		if u != '' then
			if u != _projectmanager then
				INSERT INTO studentprojects 
				VALUES(_projectid, u);
			end if;
		end if;
	END LOOP;
	 
END;
$$;

/**/
CREATE or replace FUNCTION FN_GetProject(_id integer) 
Returns Table(projectid int, status int, projectmanager varchar,headline varchar, documentation varchar, description varchar, startdate date, enddate date)
as $$
BEGIN

RETURN QUERY SELECT projects.projectid, projects.statusid,projects.projectmanager, projects.headline, 
projects.documentation, projects.description, projects.startdate, projects.enddate from projects
WHERE projects.projectid = _id;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_GetStudent(_username varchar) 
Returns Table(username varchar, fullname varchar, education varchar)
as $$
BEGIN

RETURN QUERY SELECT students.username, students.fullname, education.education from students
LEFT JOIN education
ON education.educationid = students.educationid
WHERE students.username = _username;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE OR REPLACE PROCEDURE SP_AddToProject(_projectid integer, _username varchar )
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 INSERT INTO studentprojects VALUES(_projectid, _username);
	 
END
$$;

/**/
CREATE OR REPLACE PROCEDURE SP_RemoveFromProject(_projectid integer, _username varchar )
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 DELETE FROM studentprojects 
	 WHERE studentprojects.projectid = _projectid AND studentprojects.username = _username;  
	 
END
$$;

/**/
CREATE or replace FUNCTION FN_searchprojects(_search varchar) 
Returns Table(projectid int, status int, projectmanager varchar, headline varchar, documentation varchar, description varchar, startdate date, enddate date)
as $$
BEGIN

RETURN QUERY SELECT DISTINCT projects.projectid, projects.statusid, projects.projectmanager, projects.headline, 
projects.documentation, projects.description, projects.startdate, projects.enddate from projects
WHERE projects.description ILIKE '%'|| _search || '%' OR projects.headline ILIKE '%'|| _search || '%'
ORDER BY projects.projectid;

END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_searchstudents(_search varchar) 
Returns Table(username varchar, fullname varchar, education varchar)
as $$
BEGIN

if _search = 'noproject' then
RETURN QUERY SELECT  students.username, students.fullname, education.education from students
JOIN education
ON education.educationid = students.educationid
WHERE students.username NOT IN(SELECT DISTINCT students.username from students JOIN studentprojects ON students.username = studentprojects.username)  
ORDER BY students.username;

else

RETURN QUERY SELECT students.username, students.fullname, education.education from students
JOIN education
ON education.educationid = students.educationid
WHERE students.username ILIKE _search || '%' OR students.fullname ILIKE '%'|| _search || '%' OR education.education ILIKE _search || '%'
ORDER BY students.username;

END if;

END; $$
LANGUAGE PLPGSQL;

/**/
CREATE or replace FUNCTION FN_getprojectcomments(_projectid int) 
Returns Table(commentid int, username varchar, msg varchar, time_stamp timestamp)
as $$
BEGIN

RETURN QUERY SELECT projectcomments.commentid, projectcomments.Username, projectcomments.msg, DATE_TRUNC('second', projectcomments.time_stamp::timestamp) from projectcomments
WHERE projectcomments.projectid = _projectid
ORDER BY projectcomments.time_stamp;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE OR REPLACE FUNCTION FN_getuserpwd(_username varchar)
Returns Table(pwd char)
as $$
BEGIN

RETURN QUERY SELECT secret.pwd from secret
WHERE secret.username = _username
LIMIT 1;


END; $$
LANGUAGE PLPGSQL;

/**/
CREATE OR REPLACE PROCEDURE SP_setpwd(_username varchar, _pwd char)
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 UPDATE secret SET pwd = _pwd
	 WHERE username = _username;
	 
END
$$;

/**/
CREATE OR REPLACE PROCEDURE SP_CreateComment(_projectid int, _username varchar, _msg varchar)
LANGUAGE plpgsql

AS $$
BEGIN
	 
	 INSERT INTO projectcomments(projectid,username,msg,time_stamp)
	 VALUES(_projectid,_username, _msg, NOW()::timestamp);
	 
END
$$;

/**/
CREATE OR REPLACE FUNCTION FN_GetAuthToken(_username varchar)
Returns Table(authtoken char)
as $$
BEGIN

RETURN QUERY SELECT auth.authtoken from auth
WHERE auth.username = _username
LIMIT 1;

END; $$
LANGUAGE PLPGSQL;

/**/

